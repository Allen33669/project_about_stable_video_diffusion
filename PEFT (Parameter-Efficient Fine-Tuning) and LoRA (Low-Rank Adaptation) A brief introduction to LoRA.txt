This article is licensed under a CC BY 4.0 License.

Please forgive any errors or omissions. 還請包涵可能有錯誤或疏漏的地方

Content:
PEFT brief introduction and Why LoRA?
LoRA position / layer
LoRA rank
LoRA learning rate
LoRA architecture
LoRA pruning
LoRA quantization
LoRA continual learning
LoRA unlearning
LoRA serving systems / resource-constrained
Multiple LoRA / Multi-task
REFERENCES



=========================================================================================================================
PEFT brief introduction and Why LoRA?
Parameter-Efficient Fine-Tuning (PEFT) technology demonstrates notable costeffectiveness during the fine-tuning process. This technique minimizes the trainable parameters and computational overhead while aspiring to near fully fine-tuned performance on downstream tasks [1].

Source:
Parameter-Efficient Fine-Tuning in Large Models: A Survey of Methodologies [2].
Parameter-Efficient Fine-Tuning Methods for Pretrained Language Models: A Critical Review and Assessment [3].
When Scaling Meets LLM Finetuning: The Effect of Data, Model and Finetuning Method [4].

Considerations factors:
Model architecture: Will the model structure change?
Training: Forward propagation, backward propagation, optimization algorithms, memory usage, and etc.
Inference: Forward propagation, memory usage, and etc.
Forgetting: Can the base model parameters be preserved?
Flexibility: Convenient switching of tasks, merging of knowledge, etc.
Stable: Is the input stable?



PEFT types:
Selective PEFT:
"Methods for this category refer to either selectively finetuning a subset of the original model’s parameters while keeping the rest frozen, or introducing a minimal number of additional parameters to train, without altering the original parameters" [1].
Advantage:
It has little impact on the model structure.
No significant impact on inference costs: the method add few or no parameters to the base model.
Disadvantage:
Forgetting: the parameters of the base model are affected and the forgetting effect may occur.
Memory risk: "Some techniques within this category involve the integration of a masking matrix, which results in a spike in memory usage" [1].
Training time cost risk: "Some methods might lead to longer training periods due to a special selection mechanism. This could potentially offset the benefits of having fewer trainable parameters" [1].

Additive PEFT:
"The core idea behind adapters is to learn a set of parameters that can transform the output of one layer into the input of the next layer in a given task-specific way. Adapters are small parameter sets that can be inserted between the layers of FMs. They allow the network to be fine-tuned for a new task without modifying its original parameters" [1].
Advantage:
Keep the original parameters of the base model.
Easy to switch tasks: Can use different adapters for different tasks.
Integrate the knowledge: "Can integrate the knowledge of various tasks without forgetting the knowledge from previous tasks" [1].
Disadvantage:
Inference cost: "This category may cause an increase in inference overhead due to the additional computation required by the adapter layer" [1].
Configuration issue: "This category of methods may require careful initialization and training strategies, such as optimal settings of adapter dimensions and sparsity rates" [1].

Prompt PEFT:
"This category involves incorporating a carefully designed prompt into the input or the transformer’s layers, aiming to align the input distribution with the original training data and guide the model toward generating the desired output" [1].
Advantage:
Keep the original parameters of the base model: Maybe just adjust the embedding.
Possible no training cost: Maybe don’t need to retrain the model like hard prompt.
Disadvantage:
Performance is sometimes poor compared to other methods.
Poor Transferability: "Some prompts trained for specific a task cannot be directly transferred to other tasks. Because the prompt vectors for each task are optimized based on the data and features of that task, they have strong task-specific characteristics and are not easily generalized across different tasks" [1].
Model dependency: "This category of PEFT relies on the model’s already possessed capabilities. If the FMs have some deficiencies, it is difficult to compensate for these shortcomings through prompt tuning, and the room for performance improvement is limited" [1].
Unstable: "Sometimes relies on human input" [1].
Suboptimal performance: "Including prompt tokens in the input sequence can reduce the effective sequence length, potentially leading to suboptimal performance" [1].
 
Reparameterization PEFT:
"This technique reparameterizes the low-dimensional representation of the initial model parameters for training while converting the weights back for inference" [1].
Advantage:
Keep the original parameters of the base model.
High flexibility: "It can be applied to almost all mainstream models and is very flexible, allowing for rapid adaptation to new tasks and domains" [1].
Easy to switch tasks: Can use different LoRAs for different tasks.
Integrate the knowledge: Can integrate the knowledge of various tasks without forgetting the knowledge from previous tasks.
No significant impact on inference costs: Adjust model parameters directly for inference.
Disadvantage:
Hyperparameters sensitivity: "This type of method is sensitive to hyperparameters. Like, the rank of the inserted adaptation matrices significantly impacts the ability to adapt the model to a new task" [1].
Limited representation: "This category of PEFT assumes that model adaptations can be represented using low-rank matrices. In tasks where the feature space is highly complex, this assumption may limit expressiveness and lead to suboptimal performance" [1].



=========================================================================================================================
LoRA position / layer
Where to apply LoRA? Transformer Layers? First layer? Last layer? All layer?

Source:
Tied-Lora: Enhancing parameter efficiency of LoRA with weight tying [5].
LoRA-drop: Efficient LoRA Parameter Pruning based on Output Evaluation [6].
AdaLoRA: Adaptive Budget Allocation for Parameter-Efficient Fine-Tuning [7].

Refer to Table III [5], "Interestingly, we note that when applying LoRA to a single transformer layer, the lower layers (usually layer 4 or 8) resulted in higher performance than higher layers. This suggests that there is potentially a single low-rank update that can be applied to all layers to boost performance, but it is hard to find a low-rank update for a single-layer that results in strong performance." [5].
Refer to Fig. 2 [6], "Observations show that the squared norm of ∆Wixi for certain layers consistently remains close to zero, indicating that LoRA for these layers has almost no impact on the frozen model. Conversely, some layers show a more significant impact on the frozen model." [6].
Refer to Fig. 4 [6], "We observe that the importance distributions differ across datasets, indicating that the importance assigned by LoRA is data-dependent." [6].
Refer to Fig. 5 [6], "The results of LoRA for Query and Value are shown in Figure 5 and Figure 12. As the training data increases, the importance order of each layer remains consistent. For LoRA applied to the query matrices, the 10th layer has always been the most important, while the importance of layers 7, 8, and 9 maintains a consistently high level of importance. Indicating that this operation is insensitive to the size of the sampled data and exhibits robustness." [6].
Refer to Fig. 1 [7], "We compare the performance of LoRA when fine-tuning specific modules or layers with the same number of trainable parameters. Figure 1a shows that fine-tuning feed-forward networks (FFN) achieves better performance than self-attention modules. In addition, Figure 1b demonstrates that weight matrices in top layers are more important than those in bottom layers." [7].
Refer to Fig. 3 [7], "Figure 3 shows the resulting rank of each incremental matrix of DeBERTaV3-base fine-tuned with AdaLoRA. We find that AdaLoRA always prefers to allocating more budget to FFNs and top layers. Such behavior aligns with our empirical conclusions presented in Figure 1 that weight matrices of FFN moduels and top layers are more important for model performance. " [7].

The importance of LoRA is not equal: The importance of LoRA may vary according to different layers, different positions (such as Q, K, V), different tasks, etc.
Performance: Generally speaking, the top layer may be more influential, and increasing the training set may not have much impact.



=========================================================================================================================
LoRA rank
How many ranks are suitable?

source:
AdaLoRA: Adaptive Budget Allocation for Parameter-Efficient Fine-Tuning [7].
Flora: Low-Rank Adapters Are Secretly Gradient Compressors [8].
A Rank Stabilization Scaling Factor for Fine-Tuning with LoRA [9].
LoRA Training in the NTK Regime has No Spurious Local Minima [10].
DyLoRA: Parameter Efficient Tuning of Pre-trained Models using Dynamic Search-Free Low-Rank Adaptation [11].

Refer to Fig. 2 [7], "Figure 2 illustrates experimental results of fine-tuning DeBERTaV3-base under different budget levels." [7]. As the parameter ratio of LoRA increases, the performance is generally positively correlated.
Refer to Table I [8], Table II [8], and Table IV [8], As the rank increases, the memory used increases, and the performance also increases, but not in equal proportion. Sometimes the performance improvement is not as good as the proportion of memory increase, and sometimes the opposite is true.
Refer to Fig. 2 [9], "The study (Ding et al., 2022) asserts that fine-tuning on an increased number of parameters tends to perform better, with full-model fine-tuning consistently outperforming parameter efficient methods. Therefore we have reason to conjecture that training with larger ranks should outperform training with smaller ranks. Indeed, as illustrated in figure 2, we find that rsLoRA unlocks this performance increase for larger ranks, while LoRA’s overly aggressive scaling factor collapses and slows learning with larger ranks such that there is little to no performance difference when compared to low ranks." [9].
Refer to Fig. 3 [9], "Validating our predictions, we illustrate in figure 3 that LoRA has collapsing gradients with higher ranks, whereas rsLoRA maintains the same gradient norm for each rank at the onset of training, while the norms remain approximately within the same order of magnitude throughout the training process." [9].
Refer to Fig. 2 [10] and Fig. 3 [10], The training loss of Lora will gradually converge to full fine tuning as the number of epochs increases, which means that more epochs are needed to train using Lora. In addition, the convergence speed is faster as the rank increases, but this effect is not obvious when the rank exceeds a certain level. 
Refer to Table II [11], As Lora's rank increases, performance improves, but the improvement is getting smaller and smaller.

Performance: Generally speaking, as Lora's rank increases, its performance will also increase, but the increase will become smaller and smaller or not increase in the same proportion. Sometimes, the performance will decrease as the rank increases. As the rank of Lora increases, the influence of a single parameter in Lora will decrease.
Training cost: Although using Lora can reduce the parameters of training, it requires more epochs. As the rank of Lora increases, the training loss decreases faster, but the effect is not obvious when the rank exceeds a threshold.
Memory usage: As lora ranks increase, memory usage also increases, mainly because the optimizer needs to use more memory.



=========================================================================================================================
LoRA learning rate

source:
LoRA+: Efficient Low Rank Adaptation of Large Models [12].

Refer to Fig. 2 [12], "We observe that both the best train and test losses are consistently achieved by a combination of learning rates where ηb ≫ ηa, which validates our analysis in the previous section. Notice also that optimal learning rates (ηA, ηB) are generally close to the edge of stability, a well-known behaviour in training dynamics of deep networks (Cohen et al., 2021)." [12].

Performance: Generally speaking, the learning rate of project-up matrix B is set higher than that of project-down matrix A, and the training loss is smaller for the same learning rate.



=========================================================================================================================
LoRA architecture
The structure of lora not only has the classic project-up matrix B and project-down matrix A, but also tensor train based low-rank adaptation, singular value decomposition based adaptation, and etc.

source:
AdaLoRA: Adaptive Budget Allocation for Parameter-Efficient Fine-Tuning [7].
Tensor Train Low-rank Approximation (TT-LoRA): Democratizing AI with Accelerated LLMs [13].

AdaLoRA: AdaLoRA simulates singular value decomposition (SVD), and then truncates parameters by importance scoring.
TT-LoRA: TT-LoRA uses tensor train decomposition. The matrix is ​​decomposed into many small tensor cores. The head and tail matrices are 2D, and all the intermediate matrices are 3D.

Different LoRA structures may result in fewer parameters, but the computational cost required for training varies according to different methods. At the same time, the phenomena observed in the classic LoRA structure may not necessarily apply to other LoRA structures.



=========================================================================================================================
LoRA pruning:
Weight pruning, neuron pruning, layer pruning, filter/channel pruning

source:


Advantage:
Faster inference: Sparse matrices contain a large number of zero entries. Instead of performing arithmetic operations on every element (as in dense matrices), sparse matrix algorithms skip computations involving zeros, reducing FLOPs.
Reducing memory usage: Pruned models have fewer nonzero weights, resulting in sparse matrices that can be stored efficiently.
Prevents overfitting: By eliminating redundant parameters, pruning can help the model generalize better on unseen data.

Disadvantage:
Risk of accuracy loss: If pruning is too aggressive, the model may lose crucial connections, leading to degraded performance.
Complex implementation: Effective pruning requires careful tuning and sometimes re-training, which adds complexity to the model development process.



=========================================================================================================================
LoRA quantization:

source:

Advantage:

Disadvantage:



=========================================================================================================================
LoRA continual learning:

source:

Advantage:

Disadvantage:



=========================================================================================================================
LoRA unlearning:

source:

Advantage:

Disadvantage:



=========================================================================================================================
LoRA serving systems / resource-constrained:

source:

Advantage:

Disadvantage:



=========================================================================================================================
Multiple LoRA / Multi-task:

source:

Advantage:

Disadvantage:



=========================================================================================================================
REFERENCES
[1] Dan Zhang, Tao Feng, Lilong Xue, Yuandong Wang, Yuxiao Dong, Jie Tang, “Parameter-Efficient Fine-Tuning for Foundation Models,” arXiv, arXiv:2501.13787v1, 2025.
[2] Luping Wang, Sheng Chen, Linnan Jiang, Shu Pan, Runze Cai, Sen Yang, Fei Yang, "Parameter-Efficient Fine-Tuning in Large Models: A Survey of Methodologies,"  arXiv, arXiv:2410.19878v3, 2025.
[3] Lingling Xu, Haoran Xie, Si-Zhao Joe Qin, Xiaohui Tao, Fu Lee Wang, "Parameter-Efficient Fine-Tuning Methods for Pretrained Language Models: A Critical Review and Assessment," arXiv, arXiv:2312.12148v1, 2023.
[4] Biao Zhang, Zhongtao Liu, Colin Cherry, Orhan Firat, "When Scaling Meets LLM Finetuning: The Effect of Data, Model and Finetuning Method," arXiv, arXiv:2402.17193v1, 2024.
[5] Adithya Renduchintala, Tugrul Konuk, Oleksii Kuchaiev, "Tied-Lora: Enhancing parameter efficiency of LoRA with weight tying," arXiv, arXiv:2311.09578v2, 2024.
[6] Hongyun Zhou, Xiangyu Lu, Wang Xu, Conghui Zhu, Tiejun Zhao, Muyun Yang, "LoRA-drop: Efficient LoRA Parameter Pruning based on Output Evaluation," arXiv, arXiv:2402.07721v2, 2024.
[7] Qingru Zhang, Minshuo Chen, Alexander Bukharin, Nikos Karampatziakis, Pengcheng He, Yu Cheng, Weizhu Chen, Tuo Zhao, "AdaLoRA: Adaptive Budget Allocation for Parameter-Efficient Fine-Tuning," arXiv, arXiv:2303.10512v2, 2023. 
[8] Yongchang Hao, Yanshuai Cao, Lili Mou, "Flora: Low-Rank Adapters Are Secretly Gradient Compressors," arXiv, arXiv:2402.03293v2, 2024. 
[9] Damjan Kalajdzievski, "A Rank Stabilization Scaling Factor for Fine-Tuning with LoRA," arXiv, arXiv:2312.03732v1, 2023. 
[10] Uijeong Jang, Jason D. Lee, Ernest K. Ryu, "LoRA Training in the NTK Regime has No Spurious Local Minima," arXiv, arXiv:2402.11867v3, 2024.  
[11] Mojtaba Valipour, Mehdi Rezagholizadeh, Ivan Kobyzev, Ali Ghodsi, "DyLoRA: Parameter Efficient Tuning of Pre-trained Models using Dynamic Search-Free Low-Rank Adaptation," arXiv, arXiv:2210.07558v2, 2023.  
[12] Soufiane Hayou, Nikhil Ghosh, Bin Yu, "LoRA+: Efficient Low Rank Adaptation of Large Models," arXiv, arXiv:2402.12354v2, 2024. 
[13] Afia Anjum, Maksim E. Eren, Ismael Boureima, Boian Alexandrov, Manish Bhattarai, "Tensor Train Low-rank Approximation (TT-LoRA): Democratizing AI with Accelerated LLMs," arXiv, arXiv:2408.01008v1, 2024. 




